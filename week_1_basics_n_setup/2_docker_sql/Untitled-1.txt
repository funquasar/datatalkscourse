services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

pgcli -h localhost -p 5432 -u root -d ny_taxi

1. Создаем image с postgres
winpty docker run -it \
  -e POSTGRES_USER="root" \
  -e POSTGRES_PASSWORD="root" \
  -e POSTGRES_DB="ny_taxi" \
  -v //DataTalksCourse/week_1_basics_n_setup/2_docker_sql/ny_taxi_postgres_data:/var/lib/postgresql/data \
  -p 5432:5432 \
  --network=pg-network \
  --name pg-database \
postgres:13

2. Создаем image pgadmin

winpty docker run -it \
  -e PGADMIN_DEFAULT_EMAIL="admin@admin.com" \
  -e PGADMIN_DEFAULT_PASSWORD="root" \
  -p 8080:80 \
  --network=pg-network \
  --name pg-admin \
dpage/pgadmin4

3. Создаем сеть

docker network create pg-network

4. Создаем контейнер для Taxi

winpty docker build -t taxi_ingest:v001 .

5. Запускаем скрипт в созданном контейнере

URL="https://s3.amazonaws.com/nyc-tlc/trip+data/yellow_tripdata_2021-01.csv"
URL="http://172.20.32.1:8000/yellow_tripdata_2021-01.csv"

winpty docker run -it \
  --network=pg-network \
  taxi_ingest:v001 \
    --user=root \
    --password=root \
    --host=pg-database \
    --port=5432 \
    --db=ny_taxi \
    --table_name=yellow_taxi_trips \
    --url=${URL}

6. Создаем image для zones

winpty docker build -t taxi_ingest:v002 .

7. Запускаем скрипт в созданном image

URL="https://s3.amazonaws.com/nyc-tlc/misc/taxi+_zone_lookup.csv"
URL="http://172.20.32.1:8000/taxi%2B_zone_lookup.csv"

winpty docker run -it \
  --network=pg-network \
  taxi_ingest:v002 \
    --user=root \
    --password=root \
    --host=pg-database \
    --port=5432 \
    --db=ny_taxi \
    --table_name=zones \
    --url=${URL}
